# general settings
name: NAFNet_deblurring
model_type: ImageCleanModel
scale: 1
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 100

# dataset and data loader settings
datasets:
  train:
    name: TrainSet
    type: Dataset_PairedImage
    in_ch: 3    ## RGB image
    dataroot_gt: /home/aistudio/data/data154440/Train_data/gt_image_down_sub
    dataroot_lq: /home/aistudio/data/data154440/Train_data/blur_image_down_sub
    meta_info_file: /home/aistudio/data/data154440/Train_data/meta_info_train.txt
    geometric_augs: true

    filename_tmpl: '{}'
    io_backend:
      type: disk

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 8
    batch_size_per_gpu: 8

    ### -------------Progressive training--------------------------
    mini_batch_sizes: [8,5,4,2,1,1]             # Batch size per gpu   
    iters: [184000,128000,96000,72000,72000,48000]
    gt_size: 384   # Max patch size for progressive training
    gt_sizes: [192,256,320,384,512,1024]  # Patch sizes for progressive training.
    ### ------------------------------------------------------------

    # ## ------- Training on single fixed-patch size 128x128---------
#    # mini_batch_sizes: [1]   
#    # iters: [300000]
#    # gt_size: 128   
#    # gt_sizes: [128]
    # ## ------------------------------------------------------------

    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  val:
    name: ValSet
    type: Dataset_PairedImage
    in_ch: 3  ## RGB image
    dataroot_gt: /home/aistudio/data/data154440/Train_data/gt
    dataroot_lq: /home/aistudio/data/data154440/Train_data/input
    meta_info_file: /home/aistudio/data/data154440/Train_data/meta_info_val.txt
    io_backend:
      type: disk

# network structures
network_g: 
  type: NAFNet
  img_channel: 3
  width: 32
  middle_blk_num: 1
  enc_blk_nums: [1, 1, 1, 10]
  dec_blk_nums: [1, 1, 1, 1]

# path
path:
  pretrain_network_g: ~
  strict_load_g: true
  resume_state: ~
  output: ../BaiduExp/phase1

# training settings
train:
  total_iter: 600000
  warmup_iter: -1 # no warm up
  use_grad_clip: true

  # Split 300k iterations into two cycles. 
  # 1st cycle: fixed 3e-4 LR for 92k iters. 
  # 2nd cycle: cosine annealing (3e-4 to 1e-6) for 208k iters.
  scheduler:
    type: CosineAnnealingRestartCyclicLR
    learning_rate: !!float 2e-4
    periods: [184000, 416000]
    restart_weights: [1,1]
    eta_mins: [0.00001,0.000001]
  
  mixing_augs:
    mixup: true
    mixup_beta: 1.2
    use_identity: true

  optim_g:
    type: AdamW
    weight_decay: !!float 1e-4
    beta1: 0.9
    beta2: 0.999
  
  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 1
    reduction: mean

# validation settings
val:
  window_size: 0
  val_freq: !!float 1e3
  save_img: false
  rgb2bgr: true
  use_image: false
  max_minibatch: 8

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 1e3
  use_tb_logger: false
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
